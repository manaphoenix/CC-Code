# .github/workflows/build-docs.yml
name: Build and Deploy LDoc

# Trigger on any push to main (or master), and also on PRs to main/master
on:
  push:
    branches:
      - main      # or "master" if your default branch is master
  pull_request:
    branches:
      - main      # or "master" as above

jobs:
  build-and-deploy:
    name: Generate LDoc and Publish via gh-pages
    runs-on: ubuntu-latest

    steps:
      # 1) Check out the code (with full history so we can push)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false   # so we can push gh-pages back
          fetch-depth: 0               # full history

      # 2) Install Lua 5.3 (or 5.4) via leafo action
      - name: Setup Lua 5.3
        uses: leafo/gh-actions-lua@v8
        with:
          luaVersion: 5.3             # or 5.4 if you want

      # 3) Install LuaRocks via leafo action
      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4

      # 4) Install LDoc (and dependencies from a rockspec if you have one)
      #
      # If you maintain a rockspec like `ldoc-dev-1.rockspec` in the repo, you can
      # install dependencies with "luarocks install --only-deps ldoc-dev-1.rockspec".
      # Otherwise, simply install the latest LDoc directly:
      - name: Install LDoc
        run: |
          # If you have a custom rockspec in your repo, use that:
          if [ -f ldoc-dev-1.rockspec ]; then
            luarocks install --only-deps ./ldoc-dev-1.rockspec
          else
            luarocks install ldoc
          fi

      # 5) Run LDoc to generate HTML into a "site/" (or "docs/") folder
      #
      # If you already have a Makefile target named "make doc-site", you can
      # call it here. Otherwise, just invoke ldoc manually:
      - name: Build LDoc HTML
        run: |
          # If you have a Makefile with "doc-site" target, uncomment the line below:
          # make doc-site

          # Otherwise, just run ldoc directly:
          ldoc -c ldoc.lua

          # By default, LDoc will emit into ./docs/ (per your ldoc.lua config).
          # If you configured output="docs", the folder exists with HTML files now.

      # 6) Publish the generated HTML (./docs/) to the gh-pages branch
      #
      # We use peaceiris/actions-gh-pages@v3 to push ./docs/** â†’ gh-pages.
      # The published site will appear at https://<your-username>.github.io/<repo-name>/
      - name: Deploy to GitHub Pages
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          # By default, this pushes to gh-pages. If you want a custom branch, add:
          # publish_branch: gh-pages
          # If you want to preserve a CNAME or custom domain file, you can set:
          # keep_files: CNAME
